#include "common.h"
#include "semaphoreSO.h"

int NumFlags;

void handle_signal(int signal);
void BuildPlayingField();
void PlaceFlags();
void SetupPlayers();
int TOT_PLAYERS;
int TOT_PAWNS;
int TOT_POINTS;
int MAX_WIDTH;
int MAX_HEIGHT;
int MIN_FLAGS;
int MAX_FLAGS;
struct Cell *buff;
int *PlayerPIDs;
int shmID;

int main(){
	int i, j;
	struct sigaction sa; /* Structure for later signal catching */
	struct timespec toWait;
	toWait.tv_sec=0;
	toWait.tv_sec=50000000;
  ConfigParser("./Settings.conf", "Supercalifragilisticexpialidocious"); /* Check if the .conf is set correctly */
	TOT_PLAYERS=ConfigParser("./Settings.conf", "TOT_PLAYERS");
	TOT_PAWNS=ConfigParser("./Settings.conf", "TOT_PAWNS");
	TOT_POINTS=ConfigParser("./Settings.conf", "TOT_POINTS");
	MAX_WIDTH=ConfigParser("./Settings.conf", "MAX_WIDTH");
	MAX_HEIGHT=ConfigParser("./Settings.conf", "MAX_HEIGHT");
	MAX_FLAGS=ConfigParser("./Settings.conf", "MAX_FLAGS");
	MIN_FLAGS=ConfigParser("./Settings.conf", "MIN_FLAGS");

	bzero(&sa, sizeof(sa));
	sa.sa_handler = handle_signal;

	for(i = 0; i<NSIG; i++){
		if(sigaction(i, &sa, NULL)==-1)
			Logn("Cannot set a user-defined handler for Signal",i);
	}

	shmID = SharedMemID(ftok("./",70),sizeof(struct Cell)*MAX_HEIGHT*MAX_WIDTH);

	buff = AttachMem(shmID);

	for(i=0;i<MAX_HEIGHT;i++){
		for(j=0;j<MAX_WIDTH;j++){
			buff[i*MAX_WIDTH+j].Symbol=' '; /* Initialize the playing field */
			buff[i*MAX_WIDTH+j].Row=i;
			buff[i*MAX_WIDTH+j].Col=j;
			buff[i*MAX_WIDTH+j].Att.Points=0;
		}
	}

	BuildPlayingField();

	//#ifdef try
	int ID = Semaphore(ftok("./player.c",67), 5);
  init_Sem(ID, 0, 1); /* Players */
	init_Sem(ID, 1, 0);
	init_Sem(ID, 2, 1);
	init_Sem(ID, 3, 1); /* Game start */
	init_Sem(ID, 4, 1); /* Game start */

	Logn("ID is",ID);

	lock_Sem(ID,0); /* Lock the semaphore until all players have been generated */
	PlayerPIDs = malloc(sizeof(int)*TOT_PLAYERS);
	for(i=0;i<TOT_PLAYERS;i++){SetupPlayers(); printf("PlayerPIDs: %d\n",PlayerPIDs[i]); }/* Create all player processes */
	Wait(1);
	lock_Sem(ID,2); /* Do not allow the players to start the next turn before the master resets the wait semaphore */
	release_Sem(ID,0); /* Allows the players to place down their pawns */

  for(i=0;i<TOT_PAWNS;i++){
	while (!compare_Sem(ID,1,TOT_PLAYERS)); /* Wait until all players are done */
	BuildPlayingField();
	lock_Sem(ID,0); /* Pawns may not be placed until semaphore reset has been locked */
	init_Sem(ID,1,0);
	Log("Semaphore has been reset");
	release_Sem(ID,0); /* Players may place pawns again */
	}
	Log("Done placing, the game begins");
	sleep(2);
	/* Re-using the old semaphores */
	init_Sem(ID, 0, 1); /* Make players take turns */
	init_Sem(ID, 1, 0); /* After a player has finished their turn, it'll wait for the rest */
	init_Sem(ID, 2, 1);



	PlaceFlags(); /* Place down flags on the board */
	init_Sem(ID, 3, 0); /* Releasing the beasts */

	/* So it begins - ThÃ¨oden Ednew, King of Rohan */



	BuildPlayingField();
	PlaceFlags();
	BuildPlayingField();

	/*while(1){*/
		while (!compare_Sem(ID,1,TOT_PLAYERS));
		init_Sem(ID,1,0);
		BuildPlayingField();
	/*}*/

	Log("Removing semaphore in 60 seconds..");
	sleep(60);
	remove_Sem(ID);
	//#endif

	/*BuildPlayingField();
	Wait(2);
	PlaceFlags();
	BuildPlayingField();
	Wait(2);
	PlaceFlags();
	BuildPlayingField();*/
#ifdef DEBUG
	for(i=0;i<MAX_HEIGHT;i++){
		for(j=0;j<MAX_WIDTH;j++){
			if(buff[i*MAX_WIDTH+j].Symbol == 'P')
			printf("%d ", buff[i*MAX_WIDTH+j].Att.pawn.PIDParent);
			else
			printf("%d ", 0);
		}
		printf("\n");
	}printf("\n");

	for(i=0;i<MAX_HEIGHT;i++){
		for(j=0;j<MAX_WIDTH;j++){
			if(buff[i*MAX_WIDTH+j].Symbol == 'P')
			printf("%d ", buff[i*MAX_WIDTH+j].Att.pawn.PIDPawn);
			else
			printf("%d ", 0);
		}
		printf("\n");
	}
#endif
	shmdt(buff); /* Deattach shared memory segment */
	shmctl(shmID,IPC_RMID,NULL); /* Deallocate a shared memory */

}

void SetupPlayers(){
	static int i=0;
	char *Num=tostring(i+1);
	char* args[] = {"./player",Num,NULL};
	switch(PlayerPIDs[i]=fork()){
	case -1: printf("ERROR: Error creating fork\n"); exit(EXIT_FAILURE);break;
	case 0:  execve("./player", args, NULL); exit(EXIT_FAILURE);break;
	/*case 0: execvp(args[0],args); exit(EXIT_FAILURE);*/
	default: i++; Wait(1); break;
	}
}

/*
#######
# # # #
#######
# # # #
#######
*/
void BuildPlayingField(){
	int i, j;
	for(j=0;j<(MAX_WIDTH*2)+1;j++) printf("#"); printf("\n"); /* Print row separator */
	for(i=0;i<MAX_HEIGHT;i++){
		printf("#");
		for(j=0;j<MAX_WIDTH;j++){printf("%c#",buff[i*MAX_WIDTH+j].Symbol);} /* Print column separator and contents */
		printf("\n");
		for(j=0;j<(MAX_WIDTH*2)+1;j++) printf("#"); printf("\n"); /* Print row separator */
	}
	printf("\n");
}

void PlaceFlags(){ /* Randomly place flags in our field */
	int i, j;
	int randRow;
	int randCol;
	time_t t; /* Here's a genius idea, I'll use the time as my srand seed */
	srand((unsigned) time(&t)); /* Intializes random number generator */

	NumFlags=MinMax(MIN_FLAGS,MAX_FLAGS);
	Logn("Number of flags", NumFlags);

	for(i=0;i<MAX_HEIGHT;i++)
		for(j=0;j<MAX_WIDTH;j++) if(buff[i*MAX_WIDTH+j].Symbol=='F'){ buff[i*MAX_WIDTH+j].Symbol=' '; buff[i*MAX_WIDTH+j].Att.Points=0;} /* Remove all old flags */

	for(i=0;i<NumFlags;i++){
		Logn("Check for flag",i);
		do{
			randRow = (rand() % MAX_HEIGHT); /* Random number from 0 to MAX_HEIGHT - 1 */
			randCol = (rand() % MAX_WIDTH); /* Random number from 0 to MAX_WIDTH - 1 */
			Logn("Found",buff[randRow*MAX_WIDTH+randCol].Symbol);
		}while(buff[randRow*MAX_WIDTH+randCol].Symbol!=' '); /* if the cell is ALREADY occupied, we re-randomize our row and column numbers */

		buff[randRow*MAX_WIDTH+randCol].Symbol = 'F';
		buff[randRow*MAX_WIDTH+randCol].Att.Points = 5;
		buff[randRow*MAX_WIDTH+randCol].Row = randRow;
		buff[randRow*MAX_WIDTH+randCol].Col = randCol;

		Logn("Placed flag",i);

	}
}

void handle_signal(int signal){
	Logn("Signal", signal);
	int i;
	int status;
	if(signal==2){
		for(i=0;i<TOT_PLAYERS;i++) kill(PlayerPIDs[i], 2);
		while(PlayerPIDs[i] = wait(&status) != -1){i++;}
		shmctl(shmID,IPC_RMID,NULL);
		exit(EXIT_SUCCESS);
	}
}
